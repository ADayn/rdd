<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="934.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="917" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="917" > </text>
<g id="frames">
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (186 samples, 0.41%)</title><rect x="163.8" y="229" width="4.9" height="15.0" fill="rgb(227,180,0)" rx="2" ry="2" />
<text  x="166.79" y="239.5" ></text>
</g>
<g >
<title>rdd_main`main (44,856 samples, 100.00%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(242,229,41)" rx="2" ry="2" />
<text  x="13.00" y="847.5" >rdd_main`main</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,852 samples, 99.99%)</title><rect x="10.1" y="661" width="1179.8" height="15.0" fill="rgb(205,11,39)" rx="2" ry="2" />
<text  x="13.05" y="671.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (38,321 samples, 85.43%)</title><rect x="181.9" y="309" width="1008.0" height="15.0" fill="rgb(213,116,21)" rx="2" ry="2" />
<text  x="184.86" y="319.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (12 samples, 0.03%)</title><rect x="168.4" y="165" width="0.3" height="15.0" fill="rgb(236,71,47)" rx="2" ry="2" />
<text  x="171.36" y="175.5" ></text>
</g>
<g >
<title>rdd_main`0x1 (44,856 samples, 100.00%)</title><rect x="10.0" y="869" width="1180.0" height="15.0" fill="rgb(228,160,23)" rx="2" ry="2" />
<text  x="13.00" y="879.5" >rdd_main`0x1</text>
</g>
<g >
<title>rdd_main`std::panicking::try::do_call::ha1a4587e2a4eb439 (44,853 samples, 99.99%)</title><rect x="10.1" y="789" width="1179.9" height="15.0" fill="rgb(226,141,43)" rx="2" ry="2" />
<text  x="13.05" y="799.5" >rdd_main`std::panicking::try::do_call::ha1a4587e2a4eb439</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,832 samples, 99.95%)</title><rect x="10.6" y="581" width="1179.3" height="15.0" fill="rgb(219,24,3)" rx="2" ry="2" />
<text  x="13.58" y="591.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,850 samples, 99.99%)</title><rect x="10.1" y="629" width="1179.8" height="15.0" fill="rgb(241,121,25)" rx="2" ry="2" />
<text  x="13.11" y="639.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (385 samples, 0.86%)</title><rect x="1179.8" y="117" width="10.1" height="15.0" fill="rgb(240,19,0)" rx="2" ry="2" />
<text  x="1182.82" y="127.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,773 samples, 99.81%)</title><rect x="12.1" y="549" width="1177.8" height="15.0" fill="rgb(235,123,1)" rx="2" ry="2" />
<text  x="15.13" y="559.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (46 samples, 0.10%)</title><rect x="1188.7" y="69" width="1.2" height="15.0" fill="rgb(211,179,11)" rx="2" ry="2" />
<text  x="1191.74" y="79.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,852 samples, 99.99%)</title><rect x="10.1" y="677" width="1179.8" height="15.0" fill="rgb(242,29,27)" rx="2" ry="2" />
<text  x="13.05" y="687.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,152 samples, 98.43%)</title><rect x="28.5" y="501" width="1161.4" height="15.0" fill="rgb(219,147,13)" rx="2" ry="2" />
<text  x="31.47" y="511.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (42,144 samples, 93.95%)</title><rect x="81.3" y="421" width="1108.6" height="15.0" fill="rgb(240,46,49)" rx="2" ry="2" />
<text  x="84.29" y="431.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`__rust_maybe_catch_panic (44,853 samples, 99.99%)</title><rect x="10.1" y="805" width="1179.9" height="15.0" fill="rgb(213,2,14)" rx="2" ry="2" />
<text  x="13.05" y="815.5" >rdd_main`__rust_maybe_catch_panic</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (41,787 samples, 93.16%)</title><rect x="90.7" y="373" width="1099.2" height="15.0" fill="rgb(216,28,38)" rx="2" ry="2" />
<text  x="93.68" y="383.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,845 samples, 99.98%)</title><rect x="10.2" y="597" width="1179.7" height="15.0" fill="rgb(246,183,42)" rx="2" ry="2" />
<text  x="13.24" y="607.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,851 samples, 99.99%)</title><rect x="10.1" y="645" width="1179.8" height="15.0" fill="rgb(215,3,2)" rx="2" ry="2" />
<text  x="13.08" y="655.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (178 samples, 0.40%)</title><rect x="1185.3" y="101" width="4.6" height="15.0" fill="rgb(222,17,41)" rx="2" ry="2" />
<text  x="1188.26" y="111.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,519 samples, 99.25%)</title><rect x="18.8" y="517" width="1171.1" height="15.0" fill="rgb(247,63,32)" rx="2" ry="2" />
<text  x="21.81" y="527.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (42,262 samples, 94.22%)</title><rect x="78.2" y="437" width="1111.7" height="15.0" fill="rgb(230,63,32)" rx="2" ry="2" />
<text  x="81.19" y="447.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (32,389 samples, 72.21%)</title><rect x="337.9" y="261" width="852.0" height="15.0" fill="rgb(246,167,5)" rx="2" ry="2" />
<text  x="340.91" y="271.5" >rdd_main`rdd::expr::eval::hb60cbea55d1ec02e</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,816 samples, 99.91%)</title><rect x="11.0" y="565" width="1178.9" height="15.0" fill="rgb(225,195,4)" rx="2" ry="2" />
<text  x="14.00" y="575.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,852 samples, 99.99%)</title><rect x="10.1" y="725" width="1179.8" height="15.0" fill="rgb(220,65,20)" rx="2" ry="2" />
<text  x="13.05" y="735.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (1,900 samples, 4.24%)</title><rect x="118.7" y="309" width="50.0" height="15.0" fill="rgb(234,85,50)" rx="2" ry="2" />
<text  x="121.70" y="319.5" >rdd_m..</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (382 samples, 0.85%)</title><rect x="158.6" y="245" width="10.1" height="15.0" fill="rgb(234,123,20)" rx="2" ry="2" />
<text  x="161.63" y="255.5" ></text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (2,027 samples, 4.52%)</title><rect x="115.4" y="325" width="53.3" height="15.0" fill="rgb(234,96,52)" rx="2" ry="2" />
<text  x="118.36" y="335.5" >rdd_m..</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (44 samples, 0.10%)</title><rect x="167.5" y="197" width="1.2" height="15.0" fill="rgb(236,110,28)" rx="2" ry="2" />
<text  x="170.52" y="207.5" ></text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (7 samples, 0.02%)</title><rect x="1189.8" y="37" width="0.1" height="15.0" fill="rgb(219,133,21)" rx="2" ry="2" />
<text  x="1192.76" y="47.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (41,653 samples, 92.86%)</title><rect x="94.2" y="357" width="1095.7" height="15.0" fill="rgb(216,143,7)" rx="2" ry="2" />
<text  x="97.21" y="367.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h26b04a4aa6decf69 (44,853 samples, 99.99%)</title><rect x="10.1" y="773" width="1179.9" height="15.0" fill="rgb(214,47,7)" rx="2" ry="2" />
<text  x="13.05" y="783.5" >rdd_main`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h26b04a4aa6decf69</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from::hdee2eb6a4058c02f (44,852 samples, 99.99%)</title><rect x="10.1" y="741" width="1179.8" height="15.0" fill="rgb(230,196,40)" rx="2" ry="2" />
<text  x="13.05" y="751.5" >rdd_main`rdd::naive_bdd::from::hdee2eb6a4058c02f</text>
</g>
<g >
<title>libdyld.dylib`start (44,856 samples, 100.00%)</title><rect x="10.0" y="853" width="1180.0" height="15.0" fill="rgb(219,181,22)" rx="2" ry="2" />
<text  x="13.00" y="863.5" >libdyld.dylib`start</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (20 samples, 0.04%)</title><rect x="1189.4" y="53" width="0.5" height="15.0" fill="rgb(237,54,54)" rx="2" ry="2" />
<text  x="1192.42" y="63.5" ></text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (726 samples, 1.62%)</title><rect x="1170.8" y="133" width="19.1" height="15.0" fill="rgb(225,54,44)" rx="2" ry="2" />
<text  x="1173.85" y="143.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (43,321 samples, 96.58%)</title><rect x="50.3" y="485" width="1139.6" height="15.0" fill="rgb(224,53,19)" rx="2" ry="2" />
<text  x="53.33" y="495.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,852 samples, 99.99%)</title><rect x="10.1" y="693" width="1179.8" height="15.0" fill="rgb(214,145,31)" rx="2" ry="2" />
<text  x="13.05" y="703.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (6,272 samples, 13.98%)</title><rect x="1025.0" y="181" width="164.9" height="15.0" fill="rgb(219,187,34)" rx="2" ry="2" />
<text  x="1027.95" y="191.5" >rdd_main`rdd::expr::e..</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (12 samples, 0.03%)</title><rect x="102.4" y="341" width="0.4" height="15.0" fill="rgb(240,111,9)" rx="2" ry="2" />
<text  x="105.44" y="351.5" ></text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (11,828 samples, 26.37%)</title><rect x="878.8" y="197" width="311.1" height="15.0" fill="rgb(234,39,3)" rx="2" ry="2" />
<text  x="881.80" y="207.5" >rdd_main`rdd::expr::eval::hb60cbea55d1ec02e</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (35,228 samples, 78.54%)</title><rect x="263.2" y="277" width="926.7" height="15.0" fill="rgb(220,101,53)" rx="2" ry="2" />
<text  x="266.23" y="287.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,852 samples, 99.99%)</title><rect x="10.1" y="709" width="1179.8" height="15.0" fill="rgb(215,128,43)" rx="2" ry="2" />
<text  x="13.05" y="719.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (19,365 samples, 43.17%)</title><rect x="680.5" y="213" width="509.4" height="15.0" fill="rgb(233,147,31)" rx="2" ry="2" />
<text  x="683.52" y="223.5" >rdd_main`rdd::expr::eval::hb60cbea55d1ec02e</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (714 samples, 1.59%)</title><rect x="149.9" y="261" width="18.8" height="15.0" fill="rgb(222,222,19)" rx="2" ry="2" />
<text  x="152.90" y="271.5" ></text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (3,091 samples, 6.89%)</title><rect x="1108.6" y="165" width="81.3" height="15.0" fill="rgb(245,165,33)" rx="2" ry="2" />
<text  x="1111.63" y="175.5" >rdd_main`..</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (42,776 samples, 95.36%)</title><rect x="64.7" y="469" width="1125.2" height="15.0" fill="rgb(234,191,26)" rx="2" ry="2" />
<text  x="67.66" y="479.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (1,186 samples, 2.64%)</title><rect x="137.5" y="277" width="31.2" height="15.0" fill="rgb(240,55,5)" rx="2" ry="2" />
<text  x="140.48" y="287.5" >rd..</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (129 samples, 0.29%)</title><rect x="259.8" y="277" width="3.4" height="15.0" fill="rgb(219,129,0)" rx="2" ry="2" />
<text  x="262.83" y="287.5" ></text>
</g>
<g >
<title>all (44,856 samples, 100%)</title><rect x="10.0" y="885" width="1180.0" height="15.0" fill="rgb(222,195,11)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,693 samples, 99.64%)</title><rect x="14.2" y="533" width="1175.7" height="15.0" fill="rgb(243,169,54)" rx="2" ry="2" />
<text  x="17.24" y="543.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (1,480 samples, 3.30%)</title><rect x="1151.0" y="149" width="38.9" height="15.0" fill="rgb(225,51,31)" rx="2" ry="2" />
<text  x="1154.01" y="159.5" >rdd..</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (28 samples, 0.06%)</title><rect x="167.9" y="181" width="0.8" height="15.0" fill="rgb(209,2,50)" rx="2" ry="2" />
<text  x="170.94" y="191.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (41,328 samples, 92.13%)</title><rect x="102.8" y="341" width="1087.1" height="15.0" fill="rgb(213,111,3)" rx="2" ry="2" />
<text  x="105.76" y="351.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (93 samples, 0.21%)</title><rect x="166.2" y="213" width="2.5" height="15.0" fill="rgb(220,8,20)" rx="2" ry="2" />
<text  x="169.23" y="223.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (44,849 samples, 99.98%)</title><rect x="10.1" y="613" width="1179.8" height="15.0" fill="rgb(208,199,53)" rx="2" ry="2" />
<text  x="13.13" y="623.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (1,652 samples, 3.68%)</title><rect x="125.2" y="293" width="43.5" height="15.0" fill="rgb(244,161,30)" rx="2" ry="2" />
<text  x="128.22" y="303.5" >rdd_..</text>
</g>
<g >
<title>rdd_main`rdd_main::main::h302708527c75f825 (44,853 samples, 99.99%)</title><rect x="10.1" y="757" width="1179.9" height="15.0" fill="rgb(226,24,21)" rx="2" ry="2" />
<text  x="13.05" y="767.5" >rdd_main`rdd_main::main::h302708527c75f825</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (42,477 samples, 94.70%)</title><rect x="72.5" y="453" width="1117.4" height="15.0" fill="rgb(217,170,19)" rx="2" ry="2" />
<text  x="75.53" y="463.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (42,031 samples, 93.70%)</title><rect x="84.3" y="405" width="1105.6" height="15.0" fill="rgb(210,220,46)" rx="2" ry="2" />
<text  x="87.26" y="415.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (37,275 samples, 83.10%)</title><rect x="209.4" y="293" width="980.5" height="15.0" fill="rgb(236,208,16)" rx="2" ry="2" />
<text  x="212.38" y="303.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (26,028 samples, 58.03%)</title><rect x="505.2" y="229" width="684.7" height="15.0" fill="rgb(235,177,20)" rx="2" ry="2" />
<text  x="508.24" y="239.5" >rdd_main`rdd::expr::eval::hb60cbea55d1ec02e</text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (38,822 samples, 86.55%)</title><rect x="168.7" y="325" width="1021.2" height="15.0" fill="rgb(217,167,32)" rx="2" ry="2" />
<text  x="171.68" y="335.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (30,404 samples, 67.78%)</title><rect x="390.1" y="245" width="799.8" height="15.0" fill="rgb(250,140,15)" rx="2" ry="2" />
<text  x="393.13" y="255.5" >rdd_main`rdd::expr::eval::hb60cbea55d1ec02e</text>
</g>
<g >
<title>rdd_main`std::rt::lang_start_internal::hcf96e32a124891dc (44,854 samples, 100.00%)</title><rect x="10.1" y="821" width="1179.9" height="15.0" fill="rgb(229,38,2)" rx="2" ry="2" />
<text  x="13.05" y="831.5" >rdd_main`std::rt::lang_start_internal::hcf96e32a124891dc</text>
</g>
<g >
<title>rdd_main`rdd::expr::eval::hb60cbea55d1ec02e (96 samples, 0.21%)</title><rect x="1187.4" y="85" width="2.5" height="15.0" fill="rgb(219,213,5)" rx="2" ry="2" />
<text  x="1190.42" y="95.5" ></text>
</g>
<g >
<title>rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852 (41,916 samples, 93.45%)</title><rect x="87.3" y="389" width="1102.6" height="15.0" fill="rgb(234,70,18)" rx="2" ry="2" />
<text  x="90.29" y="399.5" >rdd_main`rdd::naive_bdd::from_rec::hdeed6c73ba365852</text>
</g>
</g>
</svg>
